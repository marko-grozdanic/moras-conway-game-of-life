class GameOfLife 
{
	field int numRows, numColumns, boardDimension;
	field Array Matrix;
	
	constructor GameOfLife new(int x, int y) //Expects x and y as pixel resolution values(height, width)
	{
		let numColumns = (x / 8); //Number of our abstract 'columns', pixel size divided by 8
		let numRows = (y / 8); //Number of our abstract 'rows', pixel size divided by 8
		let boardDimension = numColumns * numRows * 2;  //Dimension of the board in separated into squares size of 8px
		return this;
	}
	
	method void dispose()
	{
		do Matrix.dispose();
		return;
	}
	
	method void start() 
	{	
		var int counter;
		let Matrix = Array.new(boardDimension); 
		let counter = 0;
		
		//Initialise original board cell status based on user's scenario input
		do initialiseBoard(0);
		
		//Draw step zero
		while(counter < boardDimension)
		{
			if(Matrix[counter] = 1)
			{
				do drawSquare(counter);
				//do Sys.wait(5);
			}
			
			let counter = counter + 1;
		}
		
		//Calculate and draw next step
		
		//End Simulation
		
		return;
	}
	
	method void initialiseBoard(int scenario)
	{
		if(scenario = 0)
		{
			let Matrix[300] = 1;
			let Matrix[301] = 1;
			let Matrix[302] = 1;
			let Matrix[331] = 1;
			let Matrix[459] = 1;
		}
		return;
	}
	
	//method void drawSquare(int xTop, int yTop)
	method void drawSquare(int cellNumber)
	{	
			var int xTop, yTop;
			var int xBottom, yBottom;
			var int k, l;
			
			let k = cellNumber / numColumns; //Find out which row of the board is the cell in
			// do Output.printInt(k);
			// do Output.println();
			let l = modulo(cellNumber, numRows); //Find out which column of the row is the cell in
			// do Output.printInt(l);
			// do Output.println();
			
			let xTop = k * 8;
			// do Output.printInt(xTop);
			// do Output.println();
			let yTop = l * 8;
			// do Output.printInt(yTop);
			// do Output.println();
			// do Output.printChar(48);
			// do Output.println();
			let xBottom = xTop + 7;
			let yBottom = yTop + 7;
			// do Output.printInt(xBottom);
			// do Output.println();
			// do Output.printInt(yBottom);
			// do Output.println();

			do Screen.drawRectangle(xTop, yTop, xBottom, yBottom); 
			
			return;
			// if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255) |
			// (x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255) |
			// (x1 > x2) | (y1 > y2)) {
			// do Sys.error(9); // Screen.drawRectangle: Illegal rectangle coordinates    
	}
	
	method void calculateStep()
	{
		return;
	}
	
	method int modulo(int a, int b)
	{
		var int result;
		let result = a - (b * (a/b));
		return result;
	}
	
}	
