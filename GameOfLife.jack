class GameOfLife 
{
	field int numRows, numColumns, boardDimension, stepDelay;
	field bool paused;
	field Array Matrix, Buffer;
	
	constructor GameOfLife new()
	{
		let boardDimension = 2048;
		let stepDelay = 1000; //Delay between displaying steps(in ms)
		let Matrix = Array.new(boardDimension);
		let Buffer = Array.new(boardDimension);
		let paused = false; //The game should be unpaused by default
		do initialiseMatrix(); //Set matrix values to 0
		do initialiseBuffer(); //Set buffer values to 0
		return this;
	}
	
	method void dispose()
	{
		do Matrix.dispose();
		do Buffer.dispose();
		return;
	}
	
	method void start(int seed) 
	{	
		var char c;
		do LCGRandom.setSeed(seed); //Set the seed for random generation
		
		//Print game instructions and wait for scenario input
		let c = showInstructionsMenu();
		
		//Initialise the Matrix based on user's scenario input
		do addCellsToBoard(c);
		
		//Draw step zero
		do drawStep();
		
		// Calculate and draw next step
		while(true)
		{
			if(Keyboard.keyPressed() = 32) //Space pressed, unpause
				{
					let paused = false;
					do Sys.wait(300);
				}
			while(~(paused)) //Game isn't paused
			{
				if(~(Keyboard.keyPressed() = 0)) //A key has been pressed
				{
					let c = Keyboard.keyPressed();
					do handleInput(c);
				}
				do Sys.wait(stepDelay); //Wait until next step 
				do calculateStep(); //Calculates a new Matrix
				do Screen.clearScreen();
				do drawStep(); //Prints the Matrix
			}
		 }
		return;
	}
	
	//method void drawSquare(int xTop, int yTop)
	method void drawSquare(int cellNumber)
	{	
			var int xTop, yTop;
			var int k, l;
			
			let k = cellNumber / 64; //Find out which row of the board is the cell in [0, 31]
			let l = ExtraMath.modulo(cellNumber, 64); //Find out which column of the row is the cell in [0, 63]
			
			let xTop = l * 8;
			let yTop = k * 8;

			do Screen.drawRectangle(xTop, yTop, xTop + 7, yTop + 7); 
			
			return;
	}
	
	method void calculateStep() //Calculates the next Matrix state
	{	
		var int i, aliveNeighbouringCells;
		let i = 0;
		let aliveNeighbouringCells = 0;
		while(i < 2048)
		{
			let Buffer[i] = Matrix[i];
			let i = i+1;
		}
		let i = 0;
		while(i < 2048) //For every cell
		{
			if(isEdgeCase(i))
			{
				if(ExtraMath.modulo(i, 64) = 0) //Cell is on left border
				{
					if(Buffer[i-64] = 1) //North
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+64] = 1) //South
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+1] = 1) //East
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+63] = 1) //West
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-63] = 1) //Northeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+65] = 1) //Southeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+127] = 1) //Southwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}	
					if(Buffer[i-1] = 1) //Northwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
				}
				if(ExtraMath.modulo(i, 64) = 63) //Cell is on right border
				{
					if(Buffer[i-64] = 1) //North
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+64] = 1) //South
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-63] = 1) //East
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-1] = 1) //West
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-127] = 1) //Northeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+1] = 1) //Southeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+63] = 1) //Southwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}	
					if(Buffer[i-65] = 1) //Northwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
				}
				if(i < 64) //Cell is on top border
				{
					if(Buffer[i+1984] = 1) //North
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+64] = 1)  //South
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+1] = 1) //East
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-1] = 1) //West
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+1985] = 1) //Northeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+65] = 1) //Southeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+63] = 1) //Southwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+1983] = 1) //Northwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
				}
				if(i > 1983) //Cell is on bottom border
				{
						if(Buffer[i-64] = 1) //North
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-1984] = 1)  //South
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+1] = 1) //East
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-1] = 1) //West
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-63] = 1) //Northeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-1983] = 1) //Southeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-1985] = 1) //Southwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-65] = 1) //Northwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
				}
				if(i = 0)
				{
					if(Buffer[1984] = 1) //North
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+64] = 1)  //South
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+1] = 1) //East
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[63] = 1) //West
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[1985] = 1) //Northeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+65] = 1) //Southeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[127] = 1) //Southwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[2047] = 1) //Northwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
				}
				if(i = 63)
				{
					if(Buffer[2047] = 1) //North
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+64] = 1)  //South
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[0] = 1) //East
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-1] = 1) //West
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[1984] = 1) //Northeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[32] = 1) //Southeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+63] = 1) //Southwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[2046] = 1) //Northwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
				}
				if(i = 1984)
				{
					if(Buffer[i-64] = 1) //North
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[0] = 1)  //South
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i+1] = 1) //East
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[2047] = 1) //West
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-63] = 1) //Northeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[1] = 1) //Southeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[63] = 1) //Southwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[1983] = 1) //Northwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
				}
				if(i = 2047)
				{
					if(Buffer[i-64] = 1) //North
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[63] = 1)  //South
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[1984] = 1) //East
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-1] = 1) //West
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[1920] = 1) //Northeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[0] = 1) //Southeast
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[62] = 1) //Southwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
					if(Buffer[i-65] = 1) //Northwest
					{
						let aliveNeighbouringCells = aliveNeighbouringCells + 1;
					}
				}
			}
			else //Every other cell
			{
				if(Buffer[i-64] = 1) //North
				{
					let aliveNeighbouringCells = aliveNeighbouringCells + 1;
				}
				if(Buffer[i+64] = 1)  //South
				{
					let aliveNeighbouringCells = aliveNeighbouringCells + 1;
				}
				if(Buffer[i+1] = 1) //East
				{
					let aliveNeighbouringCells = aliveNeighbouringCells + 1;
				}
				if(Buffer[i-1] = 1) //West
				{
					let aliveNeighbouringCells = aliveNeighbouringCells + 1;
				}
				if(Buffer[i-63] = 1) //Northeast
				{
					let aliveNeighbouringCells = aliveNeighbouringCells + 1;
				}
				if(Buffer[i+65] = 1) //Southeast
				{
					let aliveNeighbouringCells = aliveNeighbouringCells + 1;
				}
				if(Buffer[i+63] = 1) //Southwest
				{
					let aliveNeighbouringCells = aliveNeighbouringCells + 1;
				}
				if(Buffer[i-65] = 1) //Northwest
				{
					let aliveNeighbouringCells = aliveNeighbouringCells + 1;
				}
			}
			
			if(Buffer[i] = 1) //The cell was previously alive, it will stay alive only if it has two or three alive neighbours
			{
				let Matrix[i] = 0; //Dead by default
				if(aliveNeighbouringCells = 2)
				{
					let Matrix[i] = 1;
				}
				if(aliveNeighbouringCells = 3)
				{
					let Matrix[i] = 1;
				}
			}
			else //The cell was previously dead, it will only come alive if it has exactly three neighbours
			{
				// let Matrix[i] = 0; //It already is 0 in the matrix if it is 0 in the buffer
				if(aliveNeighbouringCells = 3)
				{
					let Matrix[i] = 1;
				}
				
			}
			let i = i + 1;
			let aliveNeighbouringCells = 0;
		}
		return;
	}
	
	method void handleInput(char key)
	{
		var char c;
		if(key = 132) //Right arrow
		{
			if(stepDelay > 199) //Don't go under 100ms delay
			{
				let stepDelay = stepDelay - 100;
			}
			return;
		}
		if(key = 130) //Left arrow
		{
			let stepDelay = stepDelay + 100;
			return;
		}
		if(key = 32) //Space pauses or unpauses the game
		{
			let paused = true;
			return;
		}
		if(key = 129) //Backspace clears the board of cells
		{
			do initialiseMatrix();
			return;
		}
		if(key = 140) //ESC goes back to instructions
		{
			do initialiseMatrix(); //Clears the matrix
			let c = showInstructionsMenu(); //Catches the new scenario	
			do addCellsToBoard(c);
			return;
		}
		if(addCellsToBoard(key)) //Will  return false if it isn't a number 0-7
		{
			do addCellsToBoard(key);
			return;
		}
		return;
	}
	
	method void drawStep() //Draws the current Matrix state
	{	
		var int i;
		let i = 0;
		while(i < boardDimension)
		{
			if(Matrix[i] = 1)
			{
				do drawSquare(i);
			}
			
			let i = i + 1;
		}
		
		return;
	}
	
	method char showInstructionsMenu()
	{
		var char c;
		var bool status;
		let status = true;
		do Screen.clearScreen();
		do Sys.wait(20);
		do Graphics.printInstructions();
		do Sys.wait(300);
		while(status)
		{
			let c = ExtraKeyboard.readCharNoEcho();
			if(validateInput(c))
			{
				let status = false;
			}
		}		
		do Screen.clearScreen();
		return c;
	}
	
	method bool validateInput(char c)
	{
		if(c = 48)
		{	return true;	}
		if(c = 49)
		{	return true;	}
		if(c = 50)
		{	return true;	}
		if(c = 51)
		{	return true;	}
		if(c = 52)
		{	return true;	}
		if(c = 53)
		{	return true;	}
		if(c = 54)
		{	return true;	}
		if(c = 55)
		{	return true;	}
		return false;
	}
	
	method void addCellsToBoard(int scenario)
	{
		var int i, j;
		if(scenario = 48) //Generate random cell setup
		{
			let i = 0;
			while(i < 2048)
			{
				let j = LCGRandom.randRange(0, 6);
				if(j = 1)
				{
					let Matrix[i] = 1;
				}
				let i = i + 1;
			}
			return;
		}
		if(scenario = 49) //Draw a blinker
		{	
			let Matrix[1056] = 1; //Center square
			let Matrix[1055] = 1;
			let Matrix[1057] = 1;
			return;
		}
		if(scenario = 50) //Draw a toad
		{
			let Matrix[1056] = 1; //Center square
			let Matrix[1057] = 1;
			let Matrix[1058] = 1;
			let Matrix[1121] = 1;
			let Matrix[1120] = 1;
			let Matrix[1119] = 1;
			return;
		}
		if(scenario = 51) //Draw a beacon
		{
			let Matrix[1053] = 1; 
			let Matrix[1054] = 1;
			let Matrix[1117] = 1;
			let Matrix[1118] = 1;
			
			let Matrix[1183] = 1;
			let Matrix[1184] = 1;
			let Matrix[1247] = 1;
			let Matrix[1248] = 1;
			return;
		}
		if(scenario = 52) //Draw a pulsar
		{
			let Matrix[991] = 1; 
			let Matrix[992] = 1; 
			let Matrix[993] = 1; 
			let Matrix[931] = 1; 
			let Matrix[867] = 1; 
			let Matrix[803] = 1; 
			let Matrix[926] = 1; 
			let Matrix[862] = 1; 
			let Matrix[798] = 1; 
			let Matrix[671] = 1; 
			let Matrix[672] = 1; 
			let Matrix[673] = 1; 
			
			let Matrix[985] = 1; 
			let Matrix[986] = 1; 
			let Matrix[987] = 1; 
			let Matrix[924] = 1; 
			let Matrix[860] = 1; 
			let Matrix[796] = 1; 
			let Matrix[667] = 1; 
			let Matrix[666] = 1; 
			let Matrix[665] = 1; 
			let Matrix[919] = 1; 
			let Matrix[855] = 1; 
			let Matrix[791] = 1; 
			
			let Matrix[1119] = 1; 
			let Matrix[1120] = 1; 
			let Matrix[1121] = 1; 
			let Matrix[1439] = 1; 
			let Matrix[1440] = 1; 
			let Matrix[1441] = 1; 
			let Matrix[1310] = 1; 
			let Matrix[1246] = 1; 
			let Matrix[1182] = 1; 
			let Matrix[1315] = 1; 
			let Matrix[1251] = 1; 
			let Matrix[1187] = 1; 
			
			let Matrix[1113] = 1; 
			let Matrix[1114] = 1; 
			let Matrix[1115] = 1; 
			let Matrix[1180] = 1; 
			let Matrix[1244] = 1; 
			let Matrix[1308] = 1; 
			let Matrix[1435] = 1; 
			let Matrix[1434] = 1; 
			let Matrix[1433] = 1; 
			let Matrix[1303] = 1; 
			let Matrix[1239] = 1; 
			let Matrix[1175] = 1; 
			
			return;
		}
		if(scenario = 53) //Draw a penta-decathlon
		{
			let Matrix[1048] = 1; 
			let Matrix[1049] = 1; 
			let Matrix[986] = 1; 
			let Matrix[1114] = 1; 
			let Matrix[1051] = 1; 
			let Matrix[1052] = 1; 
			
			let Matrix[1053] = 1;
			let Matrix[1054] = 1;
			let Matrix[1119] = 1;
			let Matrix[991] = 1;
			let Matrix[1056] = 1;
			let Matrix[1057] = 1;
			return;
		}
		if(scenario = 54) //Draw a glider
		{
			let Matrix[992] = 1;
			let Matrix[1057] = 1;
			let Matrix[1121] = 1;
			let Matrix[1120] = 1;
			let Matrix[1119] = 1;
			return;
		}
		if(scenario = 55) //Draw a heavy weight spaceship
		{
			let Matrix[998] = 1; 
			let Matrix[870] = 1; 
			let Matrix[803] = 1; 
			let Matrix[804] = 1; 
			let Matrix[865] = 1; 
			let Matrix[928] = 1; 
			let Matrix[992] = 1; 
			let Matrix[1056] = 1; 
			let Matrix[1057] = 1; 
			let Matrix[1058] = 1; 
			let Matrix[1059] = 1; 
			let Matrix[1060] = 1; 
			let Matrix[1061] = 1; 
			return;
		}
		return;
	}
	
	method bool isEdgeCase(int cell)
	{
		if(cell = 0)
		{	return true;	}
		if(cell = 63)
		{	return true;	}
		if(cell = 2047)
		{	return true;	}
		if(cell = 1984)
		{	return true;	}
		if(ExtraMath.modulo(cell, 64) = 0) //Left border
		{	return true;	}
		if(ExtraMath.modulo(cell, 64) = 63) //Right border
		{	return true;	}
		if(cell < 64) //Top border
		{	return true;	}
		if(cell > 1983) //Bottom border
		{	return true;	}		
		
		return false;
	}
	method void initialiseMatrix() //Sets all matrix elements to integer 0;
	{
		var int i;
		let i = 0;
		while(i < boardDimension)
		{
			let Matrix[i] = 0;
						
			let i = i + 1;
		}
		
		return;
	}
	
	method void initialiseBuffer() //Sets all matrix elements to integer 0;
	{
		var int i;
		let i = 0;
		while(i < boardDimension)
		{
			let Matrix[i] = 0;
						
			let i = i + 1;
		}
		
		return;
	}
}	
